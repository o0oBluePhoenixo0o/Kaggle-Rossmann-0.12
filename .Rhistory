# of the data set
length(unique(temp$Store))
ggplot(temp[Sales != 0], aes(x = Day, y = Sales)) +
geom_smooth() +
ggtitle(paste("Competition opening around day", timespan))
rm(temp)
store$CompetitionOpenSince <- as.yearmon(paste(store$CompetitionOpenSinceYear,
store$CompetitionOpenSinceMonth, sep = "-"))
# Merge store and train (pre 6.2015)
store.6.15 <- store
store.6.15$CompetitionOpenSince[year(store$CompetitionOpenSince) >= 2015 & store.6.15$CompetitionOpenSinceMonth >= 6] <- NA
store.6.15$CompetitionOpenSinceMonth[store$CompetitionOpenSinceYear >= 2015 & store.6.15$CompetitionOpenSinceMonth >= 6] <- NA
store.6.15$CompetitionOpenSinceYear[store$CompetitionOpenSinceYear >= 2015 &
(store.6.15$CompetitionOpenSinceMonth >= 6 |
is.na(store.6.15$CompetitionOpenSinceMonth))] <- NA
pre.6.15_store <- merge(pre.6.15, store.6.15, by = "Store")
# remove the non-store 6.15
rm(pre.6.15)
# Sales before and after competition opens
pre.6.15_store$DateYearmon <- as.yearmon(pre.6.15_store$Date)
pre.6.15_store <- pre.6.15_store[order(Date)]
pre.1.15 <- pre.1.15 %>%
mutate(LogSales = log1p(Sales))
pre.1.15_store <- pre.1.15_store %>%
mutate(LogSales = log1p(Sales))
pre.6.15_store <- pre.6.15_store %>%
mutate(LogSales = log1p(Sales))
# Overview of public holiday dates and numbers of stores celebrating
holiday <- full %>% filter(StateHoliday == 'a')
## Saxony (SN) - Repentance Day (20-11-2013)
SN <- holiday %>% filter(Date == ymd("2013-11-20"))
## BW_BY_ST - Epiphany (06-01-2013)
BW_BY_ST <- holiday %>% filter(Date == ymd("2013-01-06"))
## BW_BY_HE_NW_RP_SL - Corpus Christi (30-05-2013) (also with SN)
BW_BY_HE_NW_RP_SL <- holiday %>% filter(Date == ymd("2013-05-30"))
# Remove SN from the list
BW_BY_HE_NW_RP_SL <- anti_join(BW_BY_HE_NW_RP_SL,SN, by = "Store")
## BY_SL - Assumption of Mary (15-08-2013)
BY_SL <- holiday %>% filter(Date == ymd("2013-08-15"))
## BB_MV_SN_ST_TH - Reformation day (31-10-2013)
BB_MV_SN_ST_TH <- holiday %>% filter(Date == ymd("2013-10-31"))
## BW_BY_NW_RP_SL- All Saint's Day (01-11-2013)
BW_BY_NW_RP_SL <- holiday %>% filter(Date == ymd("2013-11-01"))
################################
# Intersecting and Setxoring to split states
BW_BY <- semi_join(BW_BY_ST, BW_BY_HE_NW_RP_SL, by = "Store")
ST <- anti_join(BW_BY_ST, BW_BY, by = "Store")
BY <- semi_join(BW_BY, BY_SL, by = "Store")
SL <- anti_join(BY, BY_SL, by = "Store")
BW <- anti_join(BW_BY,BY, by = "Store")
HE <- anti_join(BW_BY_HE_NW_RP_SL, BW_BY_NW_RP_SL, by = "Store")
BB_MV_TH <- anti_join(anti_join(BB_MV_SN_ST_TH, SN, by = "Store"),ST, by = "Store")
NW_RP <- anti_join(BW_BY_NW_RP_SL, BW_BY, by = "Store")
allstores <- full %>% distinct(Store) # get all stores ID
BE_HB_HH_NI_SH <- anti_join(anti_join(allstores, BW_BY_HE_NW_RP_SL, by = "Store"), BB_MV_SN_ST_TH, by = "Store")
# 26-03-2015 is a school holiday in RP but now NW
RP <- full %>%
filter(Date == ymd("2015-03-26") & SchoolHoliday == 1) %>%
semi_join(NW_RP, by = "Store")
NW <- anti_join(NW_RP, RP, by = "Store")
# Winter holidays not lasting till Feb 14th rule out MV.
# Easter holidays starting on Mar 30th suggest TH.
# Confirmed by summer holidays starting on Jul 13th.
TH <- BB_MV_TH
# Only HH has easter holidays on Mar 2nd. And on May 5th.
HH <- full %>%
filter(Date ==ymd("2015-03-02") & SchoolHoliday == 1) %>%
semi_join(BE_HB_HH_NI_SH, by = "Store")
BE_HB_NI_SH <- anti_join(BE_HB_HH_NI_SH, HH, by = "Store")
# Only SH has holidays on Apr 17th. And on Feb 2nd.
SH <- full %>%
filter(Date == ymd("2015-04-17") & SchoolHoliday == 1) %>%
semi_join(BE_HB_NI_SH, by = "Store")
BE_HB_NI <- anti_join(BE_HB_NI_SH, SH, by = "Store")
#  Mar 25th is not a holiday in BE.
BE <- full %>%
filter(Date == ymd("2015-03-25") & SchoolHoliday == 1) %>%
semi_join(BE_HB_NI, by = "Store")
HB_NI <- anti_join(BE_HB_NI, BE, by = "Store")
#### Saving results to "store" df
store <-store %>%
mutate(States = case_when(
Store %in% intersect(store$Store, BW$Store) ~ "BW",
Store %in% intersect(store$Store, BY$Store) ~ "BY",
Store %in% intersect(store$Store, BE$Store) ~ "BE",
Store %in% intersect(store$Store, HB_NI$Store) ~ "HB, NI",
Store %in% intersect(store$Store, HH$Store) ~ "HH",
Store %in% intersect(store$Store, HE$Store) ~ "HE",
Store %in% intersect(store$Store, NW$Store) ~ "NW",
Store %in% intersect(store$Store, RP$Store) ~ "RP",
Store %in% intersect(store$Store, SN$Store) ~ "SN",
Store %in% intersect(store$Store, ST$Store) ~ "ST",
Store %in% intersect(store$Store, SH$Store) ~ "SH",
Store %in% intersect(store$Store, TH$Store) ~ "TH"))
# clean datasets
rm(BW,BY,BE,HB_NI,HH,HE,NW,RP,SN,ST,SH,TH,SL, allstores)
rm(BB_MV_SN_ST_TH, BB_MV_TH, BE_HB_HH_NI_SH, BE_HB_NI, BE_HB_NI_SH,
BW_BY, BW_BY_HE_NW_RP_SL, BW_BY_NW_RP_SL, BW_BY_ST, BY_ST,
BY_SL, NW_RP, holiday)
# Update store datasets for 1.15 and 6.15
store.1.15 <- store.1.15 %>%
inner_join(store %>% select(Store, States))
store.6.15 <- store.6.15 %>%
inner_join(store %>% select(Store, States))
# Plot results
tmp <-store %>%
semi_join(full, by = "Store") %>%
select(Store, States) %>%
group_by(States) %>%
tally()
ggplot(tmp, aes(States, n)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(y = "Number of Stores")
rm(tmp)
# Split data to 70-30 with temporal dimension(rule of thumb)
x <- max(pre.1.15$Date) - min(pre.1.15$Date)
x <- floor(x * 0.7) %>% as.numeric() # 510 days
train.pre.1.15 <- pre.1.15 %>%
filter(Date <= as.Date(min(pre.1.15$Date)) + x)
test.pre.1.15 <- pre.1.15 %>%
filter(Date > as.Date(min(pre.1.15$Date)) + x)
# Create "features" sets
## Set up variable to use all features other than those specified here
col2remove <- c("Id","Date",
"Sales",
"Customers")
# Filter only features for pre.1.15 dataset
features <- colnames(pre.1.15)[!(colnames(pre.1.15) %in% col2remove)]
train.pre.1.15 <- train.pre.1.15 %>% select(features)
# Filter only features for test dataset
features.test <- features[features !="logSales"]
test.pre.1.15 <- test.pre.1.15 %>% select(features.test)
# There are some NAs in the integer columns so conversion to zero
train.pre.1.15[is.na(train.pre.1.15)]   <- 0
test.pre.1.15[is.na(test.pre.1.15)]   <- 0
library(h2o)
h2o.init(nthreads=-1,
max_mem_size = '6G')
trainHex <- as.h2o(train.pre.1.15)
testHex <- as.h2o(test.pre.1.15)
# run with default first
rfHex <- h2o.randomForest(x = features,
y = "logSales",
ntrees = 150, # default is 50
training_frame = trainHex,
validation_frame = testHex)
h2o.no_progress()
# run with default first
rfHex <- h2o.randomForest(x = features,
y = "LogSales",
ntrees = 150, # default is 50
training_frame = trainHex,
validation_frame = testHex)
h2o.show_progress()
summary(rfHex) # RMSE 0.13
View(test.pre.1.15)
library(h2o)
h2o.init(nthreads=-1,
max_mem_size = '6G')
trainHex <- as.h2o(train.pre.1.15)
testHex <- as.h2o(test.pre.1.15)
# run with default first
rfHex <- h2o.randomForest(x = features,
y = "LogSales",
ntrees = 150, # default is 50
nbins_cats = 1115, # for 1115 stores
training_frame = trainHex,
validation_frame = testHex)
summary(rfHex)
h2o.rmse(rfHex)
rmse1 <- h2o.rmse(rfHex)
rm(rmse1)
# Filter only features for test dataset
features.test <- features[features !="LogSales"]
test.pre.1.15 <- test.pre.1.15 %>% select(features.test)
library(h2o)
h2o.init(nthreads=-1,
max_mem_size = '6G')
trainHex <- as.h2o(train.pre.1.15)
testHex <- as.h2o(test.pre.1.15)
pre.1.15Hex <- as.h2o(full.pre.1.15)
# run with default first
rfHex <- h2o.randomForest(x = features,
y = "LogSales",
ntrees = 150, # default is 50
nbins_cats = 1115, # for 1115 stores
training_frame = trainHex,
validation_frame = testHex)
# Split data to 70-30 with temporal dimension(rule of thumb)
x <- max(pre.1.15$Date) - min(pre.1.15$Date)
x <- floor(x * 0.7) %>% as.numeric() # 510 days
train.pre.1.15 <- pre.1.15 %>%
filter(Date <= as.Date(min(pre.1.15$Date)) + x)
test.pre.1.15 <- pre.1.15 %>%
filter(Date > as.Date(min(pre.1.15$Date)) + x)
# Create "features" sets
## Set up variable to use all features other than those specified here
col2remove <- c("Id","Date",
"Sales",
"Customers")
# Filter only features for pre.1.15 dataset
features <- colnames(pre.1.15)[!(colnames(pre.1.15) %in% col2remove)]
train.pre.1.15 <- train.pre.1.15 %>% select(features)
test.pre.1.15 <- test.pre.1.15 %>% select(features)
# There are some NAs in the integer columns so conversion to zero
train.pre.1.15[is.na(train.pre.1.15)]   <- 0
test.pre.1.15[is.na(test.pre.1.15)]   <- 0
full <- full %>%
mutate(LogSales = log1p(Sales))
View(full)
# Predict for 2.2015
predict.2.15 <- full %>% filter(Dates < as_date("2015-03-01"))
# Predict for 2.2015
predict.2.15 <- full %>% filter(Date < as_date("2015-03-01"))
# Predict for 2.2015
predict.2.15 <- full %>% filter(Date < as_date("2015-03-01") & Date > as_date("2015-01-31"))
View(predict.2.15)
# Run model on full set pre.1.15
full.pre.1.15 <- pre.1.15 %>% select(features)
pre.1.15Hex <- as.h2o(full.pre.1.15)
predict.2.15 <- full %>% filter(Date < as_date("2015-03-01") & Date > as_date("2015-01-31"))
features.pred <- features[features !="LogSales"]
predict.2.15 <- predict.2.15 %>% select(features.pred)
print(paste0('RMSE of model: ',h2o.rmse(rfHex)))
print(paste0('RMSE of model: ',round(h2o.rmse(rfHex),2)))
print(paste0('RMSE of model: ',round(h2o.rmse(rfHex),2)))
# Predict for 2.2015
predict.2.15 <- full %>% filter(Date < as_date("2015-03-01") & Date > as_date("2015-01-31"))
features.pred <- features[features !="LogSales"]
predict.2.15 <- predict.2.15 %>% select(features.pred)
predict.2.15Hex <- as.h2o(predict.2.15)
# Run model on full set pre.1.15
full.pre.1.15 <- pre.1.15 %>% select(features)
pre.1.15Hex <- as.h2o(full.pre.1.15)
rfHex.fc <- h2o.randomForest(x = features,
y = "LogSales",
ntrees = 150, # default is 50
nbins_cats = 1115,
training_frame = pre.1.15Hex)
## Get predictions out; predicts in H2O, as.data.frame gets them into R
predictions <- as.data.frame(h2o.predict(rfHex,predict.2.15Hex))
## Return the predictions to the original scale of the Sales data
pred <- expm1(predictions[,1])
?RMSE
# Predict for 2.2015
predict.2.15 <- full %>% filter(Date < as_date("2015-03-01") & Date > as_date("2015-01-31"))
features.pred <- features[features !="LogSales"]
ModelMetrics::rmse(predict.2.15$Sales, pred)
pred
predict.2.15$Sales
view(pred)
ModelMetrics::rmse(predict.2.15$LogSales, predictions)
predictions
predict.2.15$LogSales
ModelMetrics::rmse(predict.2.15$LogSales, as.numeric(predictions))
ModelMetrics::rmse(predict.2.15$LogSales, predictions)
ModelMetrics::rmse(predict.2.15$LogSales, predictions %>% as.numeric())
predictions %>% as.numeric()
predictions
predictions %>% as.data.frame()
ModelMetrics::rmse(predict.2.15$LogSales, predictions$predict)
# Compare to the real results
print(paste0('RMSE compare to Feb 2015: ',ModelMetrics::rmse(predict.2.15$LogSales, predictions$predict)))
# Compare to the real results
print(paste0('RMSE compare to Feb 2015: ',round(ModelMetrics::rmse(predict.2.15$LogSales, predictions$predict),2)))
# Plot predict vs actual
pred.vs.act <- data.frame(act = predict.2.15$LogSales,
pred = predictions$predict)
View(predict.2.15)
rm(pred.vs.act)
## Get predictions out; predicts in H2O, as.data.frame gets them into R
predictions <- as.data.frame(h2o.predict(rfHex.fc,predict.2.15Hex))
# Compare to the real results
print(paste0('RMSE compare to Feb 2015: ',round(ModelMetrics::rmse(predict.2.15$LogSales, predictions$predict),2)))
predict.2.15Hex <- as.h2o(predict.2.15)
predict.2.15Hex <- as.h2o(predict.2.15 %>% select(features.pred))
summary(rfHex.fc)
# Compare to the real results
print(paste0('RMSE compare to Feb 2015: ',round(ModelMetrics::rmse(predict.2.15$LogSales, predictions$predict),2)))
h2o.no_progress()
# Split data to 70-30 with temporal dimension(rule of thumb)
x <- max(pre.1.15_store$Date) - min(pre.1.15_store$Date)
x <- floor(x * 0.7) %>% as.numeric() # 510 days
train.pre.1.15_store <- pre.1.15_store %>%
filter(Date <= as.Date(min(pre.1.15_store$Date)) + x)
test.pre.1.15_store <- pre.1.15_store %>%
filter(Date > as.Date(min(pre.1.15_store$Date)) + x)
# Create "features" sets
## Set up variable to use all features other than those specified here
col2remove <- c("Id","Date",
"Sales",
#"logSales",
"Customers",
"CompetitionDistance",
"CompetitionOpenSinceMonth",
"CompetitionOpenSinceYear",
"Promo2SinceWeek",
"Promo2SinceYear",
"PromoInterval",
"CompetitionEntrance")
# Filter only features for pre.1.15_store dataset
features <- colnames(pre.1.15_store)[!(colnames(pre.1.15_store) %in% col2remove)]
train.pre.1.15_store <- train.pre.1.15_store %>% select(features)
test.pre.1.15_store <- test.pre.1.15_store %>% select(features)
# There are some NAs in the integer columns so conversion to zero
train.pre.1.15_store[is.na(train.pre.1.15_store)]   <- 0
test.pre.1.15_store[is.na(test.pre.1.15_store)]   <- 0
library(h2o)
h2o.init(nthreads=-1,
max_mem_size = '6G')
trainHex <- as.h2o(train.pre.1.15_store)
# Split data to 70-30 with temporal dimension(rule of thumb)
x <- max(pre.1.15_store$Date) - min(pre.1.15_store$Date)
x <- floor(x * 0.7) %>% as.numeric() # 510 days
train.pre.1.15_store <- pre.1.15_store %>%
filter(Date <= as.Date(min(pre.1.15_store$Date)) + x)
test.pre.1.15_store <- pre.1.15_store %>%
filter(Date > as.Date(min(pre.1.15_store$Date)) + x)
# Create "features" sets
## Set up variable to use all features other than those specified here
col2remove <- c("Id","Date",
"Sales",
"DateYearmon",
#"logSales",
"Customers",
"CompetitionDistance",
"CompetitionOpenSinceMonth",
"CompetitionOpenSinceYear",
"Promo2SinceWeek",
"Promo2SinceYear",
"PromoInterval",
"CompetitionEntrance")
# Filter only features for pre.1.15_store dataset
features <- colnames(pre.1.15_store)[!(colnames(pre.1.15_store) %in% col2remove)]
train.pre.1.15_store <- train.pre.1.15_store %>% select(features)
test.pre.1.15_store <- test.pre.1.15_store %>% select(features)
# There are some NAs in the integer columns so conversion to zero
train.pre.1.15_store[is.na(train.pre.1.15_store)]   <- 0
test.pre.1.15_store[is.na(test.pre.1.15_store)]   <- 0
library(h2o)
h2o.init(nthreads=-1,
max_mem_size = '6G')
h2o.show_progress()
trainHex <- as.h2o(train.pre.1.15_store)
# Split data to 70-30 with temporal dimension(rule of thumb)
x <- max(pre.1.15_store$Date) - min(pre.1.15_store$Date)
x <- floor(x * 0.7) %>% as.numeric() # 510 days
train.pre.1.15_store <- pre.1.15_store %>%
filter(Date <= as.Date(min(pre.1.15_store$Date)) + x)
test.pre.1.15_store <- pre.1.15_store %>%
filter(Date > as.Date(min(pre.1.15_store$Date)) + x)
# Create "features" sets
## Set up variable to use all features other than those specified here
col2remove <- c("Id","Date",
"Sales",
"DateYearmon",
"CompetitionOpenSince",
#"logSales",
"Customers",
"CompetitionDistance",
"CompetitionOpenSinceMonth",
"CompetitionOpenSinceYear",
"Promo2SinceWeek",
"Promo2SinceYear",
"PromoInterval",
"CompetitionEntrance")
# Filter only features for pre.1.15_store dataset
features <- colnames(pre.1.15_store)[!(colnames(pre.1.15_store) %in% col2remove)]
train.pre.1.15_store <- train.pre.1.15_store %>% select(features)
test.pre.1.15_store <- test.pre.1.15_store %>% select(features)
# There are some NAs in the integer columns so conversion to zero
train.pre.1.15_store[is.na(train.pre.1.15_store)]   <- 0
test.pre.1.15_store[is.na(test.pre.1.15_store)]   <- 0
library(h2o)
h2o.init(nthreads=-1,
max_mem_size = '6G')
h2o.show_progress()
trainHex <- as.h2o(train.pre.1.15_store)
testHex <- as.h2o(test.pre.1.15_store)
# run with default first
rfHex <- h2o.randomForest(x = features,
y = "LogSales",
ntrees = 150, # default is 50
nbins_cats = 1115, # for 1115 stores
training_frame = trainHex,
validation_frame = testHex)
full_store <- merge(full, store, by = "Store")
print(paste0('RMSE of model: ',round(h2o.rmse(rfHex),2)))
predict.2.15 <- full_store %>% filter(Date < as_date("2015-03-01") & Date > as_date("2015-01-31"))
features.pred <- features[features !="LogSales"]
predict.2.15Hex <- as.h2o(predict.2.15 %>% select(features.pred))
h2o.no_progress()
full.pre.1.15_store <- pre.1.15_store %>% select(features)
pre.1.15_storeHex <- as.h2o(full.pre.1.15_store)
rfHex.fc <- h2o.randomForest(x = features,
y = "LogSales",
ntrees = 150, # default is 50
nbins_cats = 1115,
training_frame = pre.1.15_storeHex)
## Get predictions out; predicts in H2O, as.data.frame gets them into R
predictions <- as.data.frame(h2o.predict(rfHex.fc,
predict.2.15Hex))
## Return the predictions to the original scale of the Sales data
pred <- expm1(predictions[,1])
# Compare to the real results
print(paste0('RMSE compare to Feb 2015: ',round(ModelMetrics::rmse(predict.2.15$LogSales, predictions$predict),2)))
# Split data to 70-30 with temporal dimension(rule of thumb)
x <- max(pre.6.15_store$Date) - min(pre.6.15_store$Date)
x <- floor(x * 0.7) %>% as.numeric() # 510 days
train.pre.6.15_store <- pre.6.15_store %>%
filter(Date <= as.Date(min(pre.6.15_store$Date)) + x)
test.pre.6.15_store <- pre.6.15_store %>%
filter(Date > as.Date(min(pre.6.15_store$Date)) + x)
# Create "features" sets
## Set up variable to use all features other than those specified here
col2remove <- c("Id","Date",
"Sales",
"DateYearmon",
"CompetitionOpenSince",
#"logSales",
"Customers",
"CompetitionDistance",
"CompetitionOpenSinceMonth",
"CompetitionOpenSinceYear",
"Promo2SinceWeek",
"Promo2SinceYear",
"PromoInterval",
"CompetitionEntrance")
# Filter only features for pre.6.15_store dataset
features <- colnames(pre.6.15_store)[!(colnames(pre.6.15_store) %in% col2remove)]
train.pre.6.15_store <- train.pre.6.15_store %>% select(features)
test.pre.6.15_store <- test.pre.6.15_store %>% select(features)
# There are some NAs in the integer columns so conversion to zero
train.pre.6.15_store[is.na(train.pre.6.15_store)]   <- 0
test.pre.6.15_store[is.na(test.pre.6.15_store)]   <- 0
# Predict for 7.2015
predict.7.15 <- full_store %>% filter(Date < as_date("2015-08-01") & Date > as_date("2015-06-30"))
View(predict.7.15)
# Compare to the real results
print(paste0('Case 3 - RMSE of prediction for July 2015: ',round(ModelMetrics::rmse(predict.7.15$LogSales, predictions$predict),2)))
# Split data to 70-30 with temporal dimension(rule of thumb)
x <- max(pre.6.15_store$Date) - min(pre.6.15_store$Date)
x <- floor(x * 0.7) %>% as.numeric() # 510 days
train.pre.6.15_store <- pre.6.15_store %>%
filter(Date <= as.Date(min(pre.6.15_store$Date)) + x)
test.pre.6.15_store <- pre.6.15_store %>%
filter(Date > as.Date(min(pre.6.15_store$Date)) + x)
# Create "features" sets
## Set up variable to use all features other than those specified here
col2remove <- c("Id","Date",
"Sales",
"DateYearmon",
"CompetitionOpenSince",
#"logSales",
"Customers",
"CompetitionDistance",
"CompetitionOpenSinceMonth",
"CompetitionOpenSinceYear",
"Promo2SinceWeek",
"Promo2SinceYear",
"PromoInterval",
"CompetitionEntrance")
# Filter only features for pre.6.15_store dataset
features <- colnames(pre.6.15_store)[!(colnames(pre.6.15_store) %in% col2remove)]
train.pre.6.15_store <- train.pre.6.15_store %>% select(features)
test.pre.6.15_store <- test.pre.6.15_store %>% select(features)
# There are some NAs in the integer columns so conversion to zero
train.pre.6.15_store[is.na(train.pre.6.15_store)]   <- 0
test.pre.6.15_store[is.na(test.pre.6.15_store)]   <- 0
library(h2o)
h2o.init(nthreads=-1,
max_mem_size = '6G')
h2o.show_progress()
trainHex <- as.h2o(train.pre.6.15_store)
testHex <- as.h2o(test.pre.6.15_store)
# run with default first
rfHex <- h2o.randomForest(x = features,
y = "LogSales",
ntrees = 150, # default is 50
nbins_cats = 1115, # for 1115 stores
training_frame = trainHex,
validation_frame = testHex)
# Compare to the real results
print(paste0('Case 3 - RMSE of prediction for July 2015: ',round(ModelMetrics::rmse(predict.7.15$LogSales, predictions$predict),2)))
print(paste0('Case 3 - RMSE of model: ',round(h2o.rmse(rfHex),2)))
# Predict for 7.2015
predict.7.15 <- full_store %>% filter(Date < as_date("2015-08-01") & Date > as_date("2015-06-30"))
features.pred <- features[features !="LogSales"]
predict.7.15Hex <- as.h2o(predict.7.15 %>% select(features.pred))
h2o.no_progress()
# Run model on full set pre.6.15_store
full.pre.6.15_store <- pre.6.15_store %>% select(features)
pre.6.15_storeHex <- as.h2o(full.pre.6.15_store)
rfHex.fc <- h2o.randomForest(x = features,
y = "LogSales",
ntrees = 150, # default is 50
nbins_cats = 1115,
training_frame = pre.6.15_storeHex)
## Get predictions out; predicts in H2O, as.data.frame gets them into R
predictions <- as.data.frame(h2o.predict(rfHex.fc,
predict.7.15Hex))
## Return the predictions to the original scale of the Sales data
pred <- expm1(predictions[,1])
# Compare to the real results
print(paste0('Case 3 - RMSE of prediction for July 2015: ',round(ModelMetrics::rmse(predict.7.15$LogSales, predictions$predict),2)))
write.csv2(pre.1.15,"Sales_12_2015.csv")
write.csv2(store.1.15,"Store_data_12_2014.csv")
# Predict for 2.2015
predict.2.15 <- full %>% filter(Date < as_date("2015-03-01") & Date > as_date("2015-01-31"))
View(pre.1.15)
View(pre.6.15_store)
